///////////////////////////////////////////////////////////
//  TaskPool.cs
//  Implementation of the Class TaskPool
//  Generated by Enterprise Architect
//  Created on:      15-апр-2019 23:18:23
//  Original author: A7tti
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace Multithreading
{
    public class QueueTaskPool : IArchiverTaskPool
    {
        private Queue<ITaskInfo> _tasksInfo;

        public bool IsHasTasks()
        {
            return _tasksInfo.Count > 0;
        }

        public int TaskCount()
        {
            return _tasksInfo.Count;
        }

        public QueueTaskPool()
        {
            _tasksInfo = new Queue<ITaskInfo>();
        }

        public void AddTask(ITaskInfo task)
        {
            lock (this)
            {
                _tasksInfo.Enqueue(task);
            }
        }

        public ITaskInfo NextTask()
        {
            ITaskInfo task = null;
            lock (this)
            {
                if (IsHasTasks())
                {
                    task = _tasksInfo.Dequeue();
                }
            }
            return task;
        }
}
}