///////////////////////////////////////////////////////////
//  Decompressor.cs
//  Implementation of the Class Decompressor
//  Generated by Enterprise Architect
//  Created on:      15-апр-2019 23:18:22
//  Original author: A7ttim
///////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Threading;

namespace MultithreadingArchiver
{
    /// <summary>
    /// Класс распаковки
    /// </summary>
    class Decompressor
    {
        /// <summary> 
        /// Хранилища для задач
        /// </summary>
        private IArchiverTaskPool _readTaskPool;
        private IArchiverTaskPool _compressTaskPool;
        private IArchiverTaskPool _writeTaskPool;
        /// <summary> 
        /// Флаг для потоков, сигнализирующий, что процесс генерации задач не окончен
        /// </summary>
        private bool _await = false;
        /// <summary> 
        /// Длина исходного файла
        /// </summary>
        Int64 _fileLength = 0;
        /// <summary> 
        /// Счётчик блоков для наблюдателя
        /// </summary>
        private Int64 _lastBlock = 0;
        /// <summary> 
        /// Счётчик считанных блоков, выставлена единица, 
        /// чтобы наблюдатель не прерывал процесс сразу
        /// </summary>
        private Int64 _batchCount = 1;
        /// <summary> 
        /// Текущая позиция файла
        /// </summary>
        private Int64 _position = 0;
        /// <summary> 
        /// Фабрика для создания задач
        /// </summary>
        private ITaskFactory _taskFactory;
        /// <summary> 
        /// Количество доступных ядер
        /// </summary>
        private int _cores;
        /// <summary> 
        /// Максимальное число задач
        /// </summary>
        private int _maxTasks;
        /// <summary> 
        /// Токен для остановки процесса
        /// </summary>
        CancellationToken _cancellationToken;

        /// <summary>
        /// Конструктор класса Распаковки
        /// </summary>
        /// <param name="factory">
        /// Фабрика для создания задач
        /// </param>
        /// <param name="cores">
        /// Количество доступных потоков для распаковки
        /// </param>
        /// <param name="maxTasks">
        /// Ограничение по количеству задач, чтобы избежать переполнения памяти
        /// </param>
        public Decompressor(CancellationToken cancellationToken, ITaskFactory factory, int cores = 2, int maxTasks = 100)
        {
            _cancellationToken = cancellationToken;
            _taskFactory = factory;
            _cores = cores > 3 ? cores - 2 : 1;
            _maxTasks = maxTasks;
        }

        /// <summary>
        /// Запустить распаковку заданного файла и сохранить по указанному пути
        /// </summary>
        /// <param name="readFile">
        /// Дескриптор файла для чтения
        /// </param>
        /// <param name="writeFile">
        /// Дескриптор файла для записи
        /// </param>
        public bool ProcessFile(FileDescriptor readFile, FileDescriptor writeFile)
        {
            _compressTaskPool = new QueueTaskPool();
            _writeTaskPool = new HashtableTaskPool();

            try
            {
                _await = true;
                // Запустить потоки распаковки
                for (int i = 0; i < _cores; ++i)
                {
                    Thread thread = new Thread(DecompressingThread);
                    thread.Start();
                }
                // Запустить поток записи
                {
                    Thread thread = new Thread(WritingThread);
                    thread.Start(writeFile);
                }
                // Запуск потока чтения
                {
                    Thread thread = new Thread(ReadingThread);
                    thread.Start(readFile);
                }

                // Ждать, пока не завершится последний кусок и обновлять прогресс
                while (_lastBlock < _batchCount && !_cancellationToken.IsCancellationRequested)
                {
                    Console.Clear();
                    Console.WriteLine("Press Ctrl+C for cancellation");
                    // Здесь должно высылаться оповещение контроллеру, чтобы тот обновил на GUI прогресс бар (W.I.P.) =]
                    Console.WriteLine("Progress: {0}%", Math.Truncate(_position / (double)_fileLength * 100));
                    Thread.Sleep(500);
                }

                _await = false;

                if (_cancellationToken.IsCancellationRequested)
                {
                    Console.WriteLine("Decompressing is cancelled");
                    return false;
                }

                return true;
            }
            catch (Exception exc)
            {
                Console.WriteLine("Can't process threads");
#if DEBUG
                Console.WriteLine(exc);
#endif
                return false;
            }
        }

        /// <summary>
        /// Метод для потока чтения. Чтение и генерация задач сжатия происходит в 1 поток, что даёт максимальную нагрузку на диск
        /// </summary>
        /// <param name="obj">
        /// Дескриптор файла для чтения
        /// </param>
        private void ReadingThread(object obj)
        {
            FileDescriptor readFile = obj as FileDescriptor;
            _fileLength = readFile.GetDescription.Length;
            try
            {
                using (FileStream _fileToBeDecompressed = readFile.GetDescription.OpenRead())
                {
                    _batchCount = 0;
                    // Читать блоки архива, пока не закончится файл
                    while (_fileToBeDecompressed.Position < _fileLength)
                    {
                        _position = _fileToBeDecompressed.Position;
                        // Защита от переполнения памяти
                        if (_compressTaskPool.TaskCount() > _maxTasks * _cores)
                        {
                            continue;
                        }
                        ITaskInfo task = _taskFactory.CreateReadTaskInfo(_batchCount, 0);
                        _compressTaskPool.AddTask(_taskFactory.CreateProcessTaskInfo(_batchCount++, task.Execute(_fileToBeDecompressed) as byte[]));
                    }
                }
            }
            catch (Exception exc)
            {
                Console.WriteLine("Error on file reading");
#if DEBUG
                Console.WriteLine(exc);
#endif
                _await = false;
            }
        }

        /// <summary>
        /// Метод потока распаковки. Распаковка и генерация задач записи работает в том количестве потоков, сколько процессоров доступно системе, 
        /// давая распределённую нагрузку на все ядра процессора почти на 100% 
        /// </summary>
        private void DecompressingThread()
        {
            try
            {
                while (_await)
                {
                    // Защита от переполнения памяти
                    if (_writeTaskPool.TaskCount() > _maxTasks)
                    {
                        continue;
                    }
                    ITaskInfo taskInfo = _compressTaskPool.NextTask() as ITaskInfo;
                    if (taskInfo == null)
                    {
                        continue;
                    }
                    _writeTaskPool.AddTask(_taskFactory.CreateWriteTaskInfo(taskInfo.GetId(), taskInfo.Execute(null) as byte[]));
                }
            }
            catch (Exception exc)
            {
                Console.WriteLine("Error on file unpacking");
#if DEBUG
                Console.WriteLine(exc);
#endif
                _await = false;
            }
        }

        /// <summary>
        /// Метод для потока записи. Запись происходит в один поток, так как требуется упорядочить сжатые блоки по Id
        /// </summary>
        /// <param name="obj">
        /// Дескриптор файла для записи
        /// </param>
        private void WritingThread(object obj)
        {
            FileDescriptor writeFile = obj as FileDescriptor;
            try
            {
                using (FileStream fileWrite = writeFile.GetDescription.OpenWrite())
                {
                    _lastBlock = 0;
                    while (_await)
                    {
                        ITaskInfo taskInfo = _writeTaskPool.NextTask() as ITaskInfo;
                        if (taskInfo == null)
                        {
                            continue;
                        }
                        taskInfo.Execute(fileWrite);
                        _lastBlock++;
                    }
                }
            }
            catch (Exception exc)
            {
                Console.WriteLine("Error on file writing");
#if DEBUG
                Console.WriteLine(exc);
#endif
                _await = false;
            }
        }
    }
}