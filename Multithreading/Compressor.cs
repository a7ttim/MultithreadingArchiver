///////////////////////////////////////////////////////////
//  Compressor.cs
//  Implementation of the Class Compressor
//  Generated by Enterprise Architect
//  Created on:      15-апр-2019 23:18:22
//  Original author: A7ttim
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.IO.Compression;
using System.Threading;
using System.Collections;
using System.Diagnostics;

namespace Multithreading
{
    /// <summary>
    /// Класс сжатия
    /// </summary>
    public class Compressor : IArchiverMode
    {
        private ArchiverTaskPool _readTaskPool;
        private ArchiverTaskPool _compressTaskPool;
        private Hashtable _writeTaskPool;
        private Int64 _readBlockSize;
        private Int64 _lastBlock;
        private bool _await = false;
        private Int64 _fileLength;
        private Int64 _batchCount;
        private Int64 _lastBatch;

        private ICompressorTaskFactory _taskFactory;
        private int _cores;
        private int _maxTasks;

        /// <summary>
        /// Конструктор класса сжатия
        /// </summary>
        /// <param name="factory">
        /// Фабрика для создания задач
        /// </param>
        /// <param name="readBlockSize">
        /// Размер блока для чтения и сжатия
        /// </param>
        /// <param name="cores">
        /// Количество доступных потоков для сжатия
        /// </param>
        /// <param name="maxTasks">
        /// Ограничение по количеству задач, чтобы избежать переполнения памяти
        /// </param>
        public Compressor(ICompressorTaskFactory factory, Int64 readBlockSize = 4096, int cores = 2, int maxTasks = 1000)
        {
            _taskFactory = factory;
            _readBlockSize = readBlockSize;
            _cores = cores;
            _maxTasks = maxTasks;
        }

        /// <summary>
        /// Запустить сжатие заданного файла и сохранить по указанному пути
        /// </summary>
        /// <param name="readFile">
        /// Дескриптор файла для чтения
        /// </param>
        /// <param name="writeFile">
        /// Дескриптор файла для записи
        /// </param>
        public bool ProcessFile(FileDescriptor readFile, FileDescriptor writeFile)
        {
            _readTaskPool = new ArchiverTaskPool();
            _compressTaskPool = new ArchiverTaskPool();
            _writeTaskPool = new Hashtable();

            // Создание задач чтения файла
            _fileLength = readFile.GetDescription.Length;
            _batchCount = _fileLength / _readBlockSize;
            _lastBatch = _fileLength % _readBlockSize;

            // Флаг для потока записи, сигнализирующий, что процесс генерации задач не окончен
            _await = true;

            try
            {
                // Запуск потока чтения
                {
                    Thread thread = new Thread(ReadingThread);
                    thread.Start(readFile);
                }

                // Запустить потоки распаковки
                for (int i = 0; i < _cores; i++)
                {
                    if (i < _cores)
                    {
                        Thread thread = new Thread(CompressingThread);
                        thread.Start();
                    }
                }

                // Запустить поток записи
                {
                    Thread thread = new Thread(WritingThread);
                    thread.Start(writeFile);
                }

                // Запуск потока генерации задач
                {
                    Thread thread = new Thread(GenerateReadTasks);
                    thread.Start();
                }
            }
            catch(Exception exc)
            {
                Console.WriteLine("Can't process threads");
                return false;
            }

            // Ждать, пока не завершится последний кусок и обновлять прогресс
            while (_lastBatch < _batchCount)
            {
                Console.Clear();
                // Здесь должно высылаться оповещение контроллеру, чтобы тот обновил на GUI прогресс бар (W.I.P.) :)
                Console.WriteLine("Progress: " + Math.Truncate(_lastBlock / (double)_batchCount * 100) + "%");
                Thread.Sleep(100);
            }

            if (_lastBatch > 0)
            {
                Thread.Sleep(100);
            }

            _await = false;
            return true;
        }

        /// <summary>
        /// Метод для потока генерации задач для чтения. Необходим для более гибкого распределения нагрузки на поток чтения файла
        /// </summary>
        private void GenerateReadTasks()
        {
            int wait = Convert.ToInt32(Math.Pow(_cores, 1.5));
            for (int i = 0; i < _batchCount; i++)
            {
                _readTaskPool.AddTask(_taskFactory.CreateReadTask(i, _readBlockSize));
                // Защита от переполнения памяти
                // Без этого произойдёт переполнение
                // Нагенерируется больше задач, чем возможно обработать за промежуток времени, проверено на SSD
                // TODO: Возможно подобрать более оптимальные значения за счёт градиентного спуска
                if (_readTaskPool.TaskCount() > _maxTasks)
                {
                    Thread.Sleep(100);
                }
            }
            if (_lastBatch > 0)
            {
                _readTaskPool.AddTask(_taskFactory.CreateReadTask(_batchCount, _lastBatch));
            }
        }

        /// <summary>
        /// Метод для потока чтения. Чтение и генерация задач сжатия происходит в 1 поток, что даёт максимальную нагрузку на диск
        /// </summary>
        /// <param name="obj">
        /// Дескриптор файла для записи
        /// </param>
        private void ReadingThread(object obj)
        {
            try
            {
                FileDescriptor read_file = ((FileDescriptor)obj);
                using (FileStream _fileToBeCompressed = read_file.GetDescription.OpenRead())
                {
                    Int64 lastBlock = 0;
                    while (_await)
                    {
                        ITaskInfo taskInfo = _readTaskPool.NextTask();
                        if (taskInfo == null)
                        {
                            continue;
                        }
                        int length = (int)taskInfo.GetData();
                        byte[] buffer = new byte[length];
                        _fileToBeCompressed.Read(buffer, 0, length);
                        _compressTaskPool.AddTask(_taskFactory.CreateCompressionTask(lastBlock++, buffer));
                        // Защита от переполнения памяти
                        if (_compressTaskPool.TaskCount() > _maxTasks)
                        {
                            Thread.Sleep(100);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Console.WriteLine("Error on file read thread");
                _await = false;
            }
        }

        // Сжатие и генерация задач записи работает в том количестве потоков, сколько процессоров доступно системе, 
        // давая распределённую почти 100% нагрузку на все ядра процессора
        private void CompressingThread()
        {
            while (_await)
            {
                CompressionTaskInfo taskInfo = _compressTaskPool.NextTask() as CompressionTaskInfo;
                if (taskInfo == null)
                {
                    continue;
                }
                try
                {
                    using (MemoryStream memoryStream = new MemoryStream())
                    {
                        taskInfo.Execute(memoryStream);
                        Hashtable.Synchronized(_writeTaskPool).Add(taskInfo.GetId(), _taskFactory.CreateCompressionWriteTask(taskInfo.GetId(), memoryStream.ToArray()));
                    }
                }
                catch (Exception exc)
                {
                    Console.WriteLine("Error on compression thread");
                    _await = false;
                }
                // Защита от переполнения памяти
                if (_writeTaskPool.Count > _maxTasks)
                {
                    Thread.Sleep(100);
                }
            }
        }

        // Запись происходит в один поток, так как требуется упорядочить сжатые блоки по Id
        private void WritingThread(object obj)
        {
            FileDescriptor writeFile = ((FileDescriptor)obj);
            try
            {
                using (FileStream fileWrite = writeFile.GetDescription.OpenWrite())
                {
                    _lastBlock = 0;
                    Hashtable tasks = Hashtable.Synchronized(_writeTaskPool);
                    while (_await)
                    {
                        if (tasks.ContainsKey(_lastBlock))
                        {
                            CompressionWriteTaskInfo taskInfo = tasks[_lastBlock] as CompressionWriteTaskInfo;
                            taskInfo.Execute(fileWrite);
                            tasks.Remove(_lastBlock);
                            _lastBlock++;
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Console.WriteLine("Error on writing thread: " + exc);
                _await = false;
            }
        }
    }
}