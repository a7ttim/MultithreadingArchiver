///////////////////////////////////////////////////////////
//  Archiver.cs
//  Implementation of the Class Archiver
//  Generated by Enterprise Architect
//  Created on:      15-апр-2019 23:18:23
//  Original author: A7ttim
///////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Threading;
using System.Diagnostics;

namespace MultithreadingArchiver
{
    /// <summary>
    /// Статический класс, выполняющий сжатие или распаковку файла и обработку исключений
    /// </summary>
    public static class Archiver
    {
        public static void Compress(string open_path, string save_path)
        {
            try
            {
                // Токен для отмены процесса
                CancellationTokenSource cancellationToken = new CancellationTokenSource();
                Console.CancelKeyPress += delegate (object sender, ConsoleCancelEventArgs args)
                {
                    args.Cancel = true;
                    cancellationToken.Cancel();
                };

                // Контейнеры для описаний файлов
                FileDescriptor open = new FileDescriptor(open_path);
                FileDescriptor save = new FileDescriptor(save_path + open.GetDescription.Name + ".gz");

                // Обработка исключений
                if (!File.Exists(open_path))
                {
                    Console.WriteLine("Source file is not exist");
                }
                if (open.GetDescription.Extension == ".gz")
                {
                    Console.WriteLine("Source file extension is GZip");
                }
                if (!Directory.Exists(save_path))
                {
                    Console.WriteLine("Dir is not exist");
                }

                CompressionTaskFactory factory = new CompressionTaskFactory();
                Compressor progamMode = new Compressor(cancellationToken.Token, factory, 56636, Environment.ProcessorCount, 100);

#if DEBUG
                // Замерить время сжатия
                var timer = new Stopwatch();
                timer.Start();
#endif
                // Запуск сжатия
                bool result = progamMode.ProcessFile(open, save);
                cancellationToken.Dispose();
#if DEBUG
                timer.Stop();
                Console.WriteLine(timer.Elapsed.TotalSeconds);
                Console.ReadKey();
#endif

                // Если процесс отменён, то удалить архив
                if (!result)
                {
                    if (File.Exists(save.GetDescription.FullName))
                    {
                        File.Delete(save.GetDescription.FullName);
                    }
                }
                else
                {
                    // Вывести уровень сжатия
                    Console.WriteLine("Compression level: " + Math.Truncate(save.GetDescription.Length / (double)open.GetDescription.Length * 100) + "%");
                }
            }
            catch (Exception exc)
            {
#if DEBUG
                Console.WriteLine(exc);
                Console.ReadKey();
#endif
            }
        }

        public static void Decompress(string open_path, string save_path)
        {
            try
            {
                // Токен для отмены процесса
                CancellationTokenSource cancellationToken = new CancellationTokenSource();
                Console.CancelKeyPress += delegate (object sender, ConsoleCancelEventArgs args)
                {
                    args.Cancel = true;
                    cancellationToken.Cancel();
                };

                // Контейнеры для описаний файлов
                FileDescriptor open = new FileDescriptor(open_path);
                FileDescriptor save = new FileDescriptor(save_path + open.GetDescription.Name.Replace(".gz", ""));

                // Обработка исключений
                if (!File.Exists(open_path))
                {
                    Console.WriteLine("Source file is not exist");
                }
                if (!Directory.Exists(save_path))
                {
                    Console.WriteLine("Dir is not exist");
                }
                if (save.GetDescription.DirectoryName == ".gz")
                {
                    Console.WriteLine("Destination file extension is GZip");
                }
                if (open.GetDescription.Extension != ".gz")
                {
                    Console.WriteLine("Source file extension is not GZip");
                }

                DecompressorTaskFactory factory = new DecompressorTaskFactory();
                Decompressor progamMode = new Decompressor(cancellationToken.Token, factory, Environment.ProcessorCount);

#if DEBUG
                var timer = new Stopwatch();
                timer.Start();
#endif
                // Запуск распаковки
                bool result = progamMode.ProcessFile(open, save);
                cancellationToken.Dispose();
#if DEBUG
                timer.Stop();
                Console.WriteLine(timer.Elapsed.TotalSeconds);
                Console.ReadKey();
#endif

                // Если процесс отменён, то удалить получившийся файл
                if (!result)
                {
                    if (File.Exists(save.GetDescription.FullName))
                    {
                        File.Delete(save.GetDescription.FullName);
                    }
                }
            }
            catch (Exception exc)
            {
#if DEBUG
                Console.WriteLine(exc);
                Console.ReadKey();
#endif
            }
        }
    }
}
